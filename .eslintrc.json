/*
"off" or 0 - turn the rule off
"warn" or 1 - turn the rule on as a warning (doesnâ€™t affect exit code)
"error" or 2 - turn the rule on as an error (exit code is 1 when triggered)
*/
{
  "env": {
    "browser": true
  },
  "extends": ["airbnb", "plugin:@typescript-eslint/recommended", "prettier", "prettier/react"],
  "plugins": ["react", "react-hooks", "@typescript-eslint", "prettier"],
  "parser": "@typescript-eslint/parser",
  "rules": {
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "no-await-in-loop": [0],
    "no-restricted-syntax": [0],
    "operator-linebreak": [0], // JsPrettier has a different opinion
    "array-bracket-spacing": [0], // JsPrettier has a different opinion
    "react/jsx-wrap-multilines": [0], // JsPrettier has a different opinion
    "implicit-arrow-linebreak": [0], // JsPrettier has a different opinion
    "react/jsx-curly-spacing": [0], // JSPrettier has mixed emotions about this
    "arrow-parens": [0], // I like the rule but JsPrettier doesn't care about that
    "lines-between-class-members": [0], // y u no like compact code?
    "react/no-unused-state": [1],
    "no-unused-vars": [0], // Duplicate of @typescript-eslint/no-unused-vars
    "array-callback-return": [1],
    "class-methods-use-this": [0],
    "jsx-a11y/no-static-element-interactions": [0],
    "jsx-a11y/click-events-have-key-events": [0],
    "react/jsx-one-expression-per-line": [0],
    "react/no-unescaped-entities": [0],
    "padded-blocks": [0],
    "jsx-a11y/label-has-for": [0],
    "jsx-a11y/label-has-associated-control": [0],
    "no-unexpected-multiline": 2,
    "react/no-access-state-in-setstate": [0],
    "react/destructuring-assignment": [0],
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx", ".tsx"] }],
    "react/prefer-stateless-function": [1, { "ignorePureComponents": true }],
    "no-console": 0,
    "object-curly-newline": 0,
    "space-in-parens": [0, "always"],
    "object-curly-spacing": [0],
    "template-curly-spacing": [2, "never"],
    "computed-property-spacing": [2, "never"],
    "no-multiple-empty-lines": [2, { "max": 1, "maxEOF": 0, "maxBOF": 0 }],
    "quotes": [0, "single", "avoid-escape"],
    "no-use-before-define": [2, { "functions": false }],
    "semi": [1, "always"],
    "prefer-const": 1,
    "react/prefer-es6-class": 0,
    "react/jsx-indent": [2, 2],
    "react/no-array-index-key": [1],
    "no-undef": [0], // Won't recognize `type` variables. Also conflicts with TS
    "no-case-declarations": [1],
    "no-return-assign": [1],
    "no-param-reassign": [1],
    "no-shadow": [1],
    "camelcase": [1],
    "no-underscore-dangle": [0, "always"],
    "comma-dangle": ["error", "only-multiline"],
    "max-len": "off", // let Prettier deal with it
    "react/react-in-jsx-scope": 0,
    "eol-last": 0,
    "react/prop-types": "off",
    "spaced-comment": 0,
    "import/no-unresolved": "off", // IDE handles this already
    "jsx-a11y/anchor-is-valid": "off", // Next.js splits up <Link> and <a> making this rule disfunctional
    "comma-spacing": "off",
    "no-plusplus": "off",
    "react/jsx-props-no-spreading": "off",
    "no-confusing-arrow": "off", // Prettier has a different opinion and it can't be overridden
    "prefer-destructuring": ["error", {
      "array": false,
      "object": true
    }, {
      "enforceForRenamedProperties": false
    }],
    "@typescript-eslint/interface-name-prefix": [
      "warn",
      {
        "prefixWithI": "always"
      }
    ]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {}
    },
    "polyfills": ["fetch"]
  }
}
